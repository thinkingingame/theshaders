// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        xCount: {
            value: 1,
            inspector: {
                tooltip: "横向个数",
            }
        }
        yCount: {
            value: 1,
            inspector: {
                tooltip: "竖向个数",
            }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>
 
  in vec4 v_color;
 
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
 
  //cocos规定在shader中所有非sampler的uniform都应以block形式声明
  uniform Mosaic{
    float xCount;       // x方向方块数
    float yCount;       // y方向方块数
  };
 
  //
  vec2 getBlockCenterPos(){
      float xBlockCount = xCount;
      if(xCount <= 0.0){
          xBlockCount = 1.0;
      }
      float yBlockCount = yCount;
      if(yCount <= 0.0){ 
          yBlockCount = 1.0;
      }
      float width = 1.0 / xBlockCount; 
      float height = 1.0 / yBlockCount;
      float xindex = floor(v_uv0.x / width);
      float yindex = floor(v_uv0.y / height);
    return vec2(width * (xindex + 0.5), height * (yindex + 0.5));
  }
 
  void main () {
    vec4 o = vec4(1, 1, 1, 1);
 
    #if USE_TEXTURE
    vec2 realPos = getBlockCenterPos();
    o *= texture(texture, realPos);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, realPos + vec2(0, 0.5)).r;
      #endif
    #endif
 
    o *= v_color;
 
    ALPHA_TEST(o);
 
    gl_FragColor = o;
  }
}%
